#if both local and remote repository are already existing
#alias name will be use when push the local change to remote
git remote add <alias name> <remote repository url>
ex. git remote add nodesample https://github.com/colechengit/nodesample.git

#after adding remote repository, check out the list
git remote -v

git add .

git commit -m "Add existing file"

#if the remote repository already contains some file, we need to pull
#before we can push the local files
git pull <alias name> <branch name on remote repository>
ex. git pull nodesample master


git push <alias name> <branch name on remote repository>
ex. git push nodesample master


#Undo a commit and redo

git commit -m "Something terribly misguided"
git reset HEAD~                                
<< edit files as necessary >>                     
git add .                                           
git commit -c ORIG_HEAD   


#discard commit, reset file to previous commit. Warning: will remove change
git reset --hard HEAD~1

#undo the commit but keep your changes
git reset HEAD~1
git reset --soft HEAD~1     #undo your commit but leave your files and your index (git add .)

#recover from destroy a commit using --hard
git reflog            #you'll see a list of (partial) commit shas that you've moved around in. Find the commit you destroyed
git checkout -b someNewBranchName shaYouDestroyed

#Syncing a fork (https://help.github.com/articles/syncing-a-fork/)
git remote add upstream https://xxxx.git
git remote -v
git fetch upstream
git checkout master
git merge upstream/master

#git pull will do two things: it does a git fetch and then a git merge.
#So, fetch and merge above can be replaced with git pull upstream <branch>
